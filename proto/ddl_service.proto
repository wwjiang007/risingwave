syntax = "proto3";

package ddl_service;

import "catalog.proto";
import "common.proto";
import "stream_plan.proto";

option java_package = "com.risingwave.proto";
option optimize_for = SPEED;

message CreateDatabaseRequest {
  catalog.Database db = 1;
}

message CreateDatabaseResponse {
  common.Status status = 1;
  uint32 database_id = 2;
  uint64 version = 3;
}

message DropDatabaseRequest {
  uint32 database_id = 1;
}

message DropDatabaseResponse {
  common.Status status = 1;
  uint64 version = 2;
}

message CreateSchemaRequest {
  catalog.Schema schema = 1;
}

message CreateSchemaResponse {
  common.Status status = 1;
  uint32 schema_id = 2;
  uint64 version = 3;
}

message DropSchemaRequest {
  uint32 schema_id = 1;
}

message DropSchemaResponse {
  common.Status status = 1;
  uint64 version = 2;
}

message CreateSourceRequest {
  catalog.Source source = 1;
  stream_plan.StreamFragmentGraph fragment_graph = 2;
}

message CreateSourceResponse {
  common.Status status = 1;
  uint32 source_id = 2;
  uint64 version = 3;
}

message DropSourceRequest {
  uint32 source_id = 1;
  bool cascade = 2;
}

message DropSourceResponse {
  common.Status status = 1;
  uint64 version = 2;
}

message AlterSourceRequest {
  catalog.Source source = 1;
}

message AlterSourceResponse {
  common.Status status = 1;
  uint64 version = 2;
}

message CreateSinkRequest {
  catalog.Sink sink = 1;
  stream_plan.StreamFragmentGraph fragment_graph = 2;
  // It is used to provide a replace plan for the downstream table in `create sink into table` requests.
  optional ReplaceTablePlan affected_table_change = 3;
}

message CreateSinkResponse {
  common.Status status = 1;
  uint32 sink_id = 2;
  uint64 version = 3;
}

message DropSinkRequest {
  uint32 sink_id = 1;
  bool cascade = 2;
  optional ReplaceTablePlan affected_table_change = 3;
}

message DropSinkResponse {
  common.Status status = 1;
  uint64 version = 2;
}

message CreateMaterializedViewRequest {
  catalog.Table materialized_view = 1;
  stream_plan.StreamFragmentGraph fragment_graph = 2;
}

message CreateMaterializedViewResponse {
  common.Status status = 1;
  uint32 table_id = 2;
  uint64 version = 3;
}

message DropMaterializedViewRequest {
  uint32 table_id = 1;
  bool cascade = 2;
}

message DropMaterializedViewResponse {
  common.Status status = 1;
  uint64 version = 2;
}

message CreateViewRequest {
  catalog.View view = 1;
}

message CreateViewResponse {
  common.Status status = 1;
  uint32 view_id = 2;
  uint64 version = 3;
}

message DropViewRequest {
  uint32 view_id = 1;
  bool cascade = 2;
}

message DropViewResponse {
  common.Status status = 1;
  uint64 version = 2;
}

// An enum to distinguish different types of the Table streaming job.
// - GENERAL: Table streaming jobs w/ or w/o a connector
// - SHARED_CDC_SOURCE: The table streaming job is created based on a shared CDC source job (risingwavelabs/rfcs#73).
// And one may add other types to support Table jobs that based on other backfill-able sources (risingwavelabs/rfcs#72).
enum TableJobType {
  TABLE_JOB_TYPE_UNSPECIFIED = 0;
  // table streaming jobs excepts the `SHARED_CDC_SOURCE` type
  TABLE_JOB_TYPE_GENERAL = 1;
  // table streaming job sharing a CDC source job
  TABLE_JOB_TYPE_SHARED_CDC_SOURCE = 2;
  // arrangement backfill
  TABLE_JOB_TYPE_ARRANGEMENT_BACKFILL = 3;
}

message CreateTableRequest {
  // An optional field and will be `Some` for tables with an external connector. If so, the table
  // will subscribe to the changes of the external connector and materialize the data.
  catalog.Source source = 1;
  catalog.Table materialized_view = 2;
  stream_plan.StreamFragmentGraph fragment_graph = 3;
  TableJobType job_type = 4;
}

message CreateTableResponse {
  common.Status status = 1;
  uint32 table_id = 2;
  uint64 version = 3;
}

message AlterNameRequest {
  oneof object {
    uint32 table_id = 1;
    uint32 view_id = 2;
    uint32 index_id = 3;
    uint32 sink_id = 4;
    uint32 source_id = 5;
    uint32 schema_id = 6;
    uint32 database_id = 7;
  }
  string new_name = 20;
}

message AlterNameResponse {
  common.Status status = 1;
  uint64 version = 2;
}

message AlterOwnerRequest {
  oneof object {
    uint32 table_id = 1;
    uint32 view_id = 2;
    uint32 source_id = 3;
    uint32 sink_id = 4;
    uint32 schema_id = 5;
    uint32 database_id = 6;
  }
  uint32 owner_id = 20;
}

message AlterSetSchemaRequest {
  oneof object {
    uint32 table_id = 1;
    uint32 view_id = 2;
    uint32 source_id = 3;
    uint32 sink_id = 4;
    uint32 function_id = 5;
    uint32 connection_id = 6;
  }
  uint32 new_schema_id = 20;
}

message AlterSetSchemaResponse {
  common.Status status = 1;
  uint64 version = 2;
}

message AlterOwnerResponse {
  common.Status status = 1;
  uint64 version = 2;
}

message CreateFunctionRequest {
  catalog.Function function = 1;
}

message CreateFunctionResponse {
  common.Status status = 1;
  uint32 function_id = 2;
  uint64 version = 3;
}

message DropFunctionRequest {
  uint32 function_id = 1;
}

message DropFunctionResponse {
  common.Status status = 1;
  uint64 version = 2;
}

message DropTableRequest {
  oneof source_id {
    uint32 id = 1;
  }
  uint32 table_id = 2;
  bool cascade = 3;
}

message DropTableResponse {
  common.Status status = 1;
  uint64 version = 2;
}

// Used by risectl (and in the future, dashboard)
message RisectlListStateTablesRequest {}

// Used by risectl (and in the future, dashboard)
message RisectlListStateTablesResponse {
  repeated catalog.Table tables = 1;
}

message CreateIndexRequest {
  catalog.Index index = 1;
  catalog.Table index_table = 2;
  stream_plan.StreamFragmentGraph fragment_graph = 3;
}

message CreateIndexResponse {
  common.Status status = 1;
  uint32 index_id = 2;
  uint64 version = 4;
}

message DropIndexRequest {
  uint32 index_id = 1;
  bool cascade = 2;
}

message DropIndexResponse {
  common.Status status = 1;
  uint64 version = 2;
}

message ReplaceTablePlan {
  // The new table catalog, with the correct table ID and a new version.
  // If the new version does not match the subsequent version in the meta service's
  // catalog, this request will be rejected.
  catalog.Table table = 1;
  // The new materialization plan, where all schema are updated.
  stream_plan.StreamFragmentGraph fragment_graph = 2;
  // The mapping from the old columns to the new columns of the table.
  // If no column modifications occur (such as for sinking into table), this will be None.
  catalog.ColIndexMapping table_col_index_mapping = 3;
  // Source catalog of table's associated source
  catalog.Source source = 4;
}

message ReplaceTablePlanRequest {
  ReplaceTablePlan plan = 1;
}

message ReplaceTablePlanResponse {
  common.Status status = 1;
  // The new global catalog version.
  uint64 version = 2;
}

message GetTableRequest {
  string database_name = 1;
  string table_name = 2;
}

message GetTableResponse {
  catalog.Table table = 1;
}

message GetDdlProgressRequest {}

message DdlProgress {
  uint64 id = 1;
  string statement = 2;
  string progress = 3;
}

message GetDdlProgressResponse {
  repeated DdlProgress ddl_progress = 1;
}

message CreateConnectionRequest {
  message PrivateLink {
    catalog.Connection.PrivateLinkService.PrivateLinkProvider provider = 1;
    string service_name = 2;
    optional string tags = 3;
  }
  string name = 1;
  uint32 database_id = 2;
  uint32 schema_id = 3;
  oneof payload {
    PrivateLink private_link = 4;
  }
  uint32 owner_id = 5;
}

message CreateConnectionResponse {
  uint32 connection_id = 1;
  // global catalog version
  uint64 version = 2;
}

message ListConnectionsRequest {}

message ListConnectionsResponse {
  repeated catalog.Connection connections = 1;
}

message DropConnectionRequest {
  uint32 connection_id = 1;
}

message DropConnectionResponse {
  common.Status status = 1;
  uint64 version = 2;
}

message GetTablesRequest {
  repeated uint32 table_ids = 1;
}

message GetTablesResponse {
  map<uint32, catalog.Table> tables = 1;
}

message WaitRequest {}

message WaitResponse {}

message CommentOnRequest {
  catalog.Comment comment = 1;
}

message CommentOnResponse {
  common.Status status = 1;
  uint64 version = 2;
}

service DdlService {
  rpc CreateDatabase(CreateDatabaseRequest) returns (CreateDatabaseResponse);
  rpc DropDatabase(DropDatabaseRequest) returns (DropDatabaseResponse);
  rpc CreateSchema(CreateSchemaRequest) returns (CreateSchemaResponse);
  rpc DropSchema(DropSchemaRequest) returns (DropSchemaResponse);
  rpc CreateSource(CreateSourceRequest) returns (CreateSourceResponse);
  rpc DropSource(DropSourceRequest) returns (DropSourceResponse);
  rpc CreateSink(CreateSinkRequest) returns (CreateSinkResponse);
  rpc DropSink(DropSinkRequest) returns (DropSinkResponse);
  rpc CreateMaterializedView(CreateMaterializedViewRequest) returns (CreateMaterializedViewResponse);
  rpc DropMaterializedView(DropMaterializedViewRequest) returns (DropMaterializedViewResponse);
  rpc CreateTable(CreateTableRequest) returns (CreateTableResponse);
  rpc AlterName(AlterNameRequest) returns (AlterNameResponse);
  rpc AlterSource(AlterSourceRequest) returns (AlterSourceResponse);
  rpc AlterOwner(AlterOwnerRequest) returns (AlterOwnerResponse);
  rpc AlterSetSchema(AlterSetSchemaRequest) returns (AlterSetSchemaResponse);
  rpc DropTable(DropTableRequest) returns (DropTableResponse);
  rpc RisectlListStateTables(RisectlListStateTablesRequest) returns (RisectlListStateTablesResponse);
  rpc CreateView(CreateViewRequest) returns (CreateViewResponse);
  rpc DropView(DropViewRequest) returns (DropViewResponse);
  rpc CreateIndex(CreateIndexRequest) returns (CreateIndexResponse);
  rpc DropIndex(DropIndexRequest) returns (DropIndexResponse);
  rpc CreateFunction(CreateFunctionRequest) returns (CreateFunctionResponse);
  rpc DropFunction(DropFunctionRequest) returns (DropFunctionResponse);
  rpc ReplaceTablePlan(ReplaceTablePlanRequest) returns (ReplaceTablePlanResponse);
  rpc GetTable(GetTableRequest) returns (GetTableResponse);
  rpc GetDdlProgress(GetDdlProgressRequest) returns (GetDdlProgressResponse);
  rpc CreateConnection(CreateConnectionRequest) returns (CreateConnectionResponse);
  rpc ListConnections(ListConnectionsRequest) returns (ListConnectionsResponse);
  rpc DropConnection(DropConnectionRequest) returns (DropConnectionResponse);
  rpc GetTables(GetTablesRequest) returns (GetTablesResponse);
  rpc Wait(WaitRequest) returns (WaitResponse);
  rpc CommentOn(CommentOnRequest) returns (CommentOnResponse);
}
